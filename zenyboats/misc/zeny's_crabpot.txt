@name Zeny's Crabpot
@inputs 
@outputs Set Length Crabs Depth Disable Door AtBottom
@persist Set Length Pack Bouy:entity AtBottom A Depth LastDepth Disable
@trigger 
@model models/zeny/crabpot.mdl

#[ INSTRUCTIONS:
	
	TO DEPLOY:
	-press e on crabpot so bouy is deployed
	-throw crabpot into the water
	-wait for crabs :)

	TO RETRIEVE:
	-hoist bouy out of water
	-crabpot will be automatically reeled in by the bouy, so just wait for it to come up.
	-retrieve crabs :)

	TO EMPTY:
	-make sure bouy is deployed
	-use context menu to activate "door" bodygroup
	-throw back in for more crabs :)

	IMPRTANT:
	-pots have a tendency to disable themselves in shallow water, if the pot does not catch any crabs, just refresh the e2 and try again.
]#




if (first()|dupefinished()) {
    entity():setBodygroup(2,1)
    noCollideAll(entity(), 0)
    entity():setMass(100)
    Set = 0
    AtBottom = 0
    A = 0
    Disable = 0
}
if (Set == 0) {
    runOnUse(1)
    if (useClk()) {
        entity():setBodygroup(2,0)
        
        Bouy = propSpawn("models/zeny/small_bouy.mdl", entity():toWorld(vec(0,0,30)), ang(0,0,0), 0)
        
        winch(1, entity(), vec(0,0,15), Bouy, vec(0,0,-10), 3)
        entity():setLength(1,5)
        Length = 5
        
        Pack = 0
        Disable = 0
        Set = !Set
        timer("packable", 1000)
    }
    
}
if (Set == 1) {
    interval(100)
    Speed = entity():vel():length()
    Door = entity():getBodygroup(1)
    if (clk("packable")) {
        Pack = 1
    }
    if (useClk() & Pack == 1) {
        Bouy:propDelete()  
        Set = !Set
        entity():setBodygroup(2,1)  
        AtBottom = 0
    }
    if(entity():isUnderWater()) {
        if (Speed > 1 & AtBottom == 0 & Disable == 0) {
            Length += 5
            entity():setLength(1,Length)
        }
    
        if (Speed < 1 & AtBottom == 0 & Disable == 0) {
            timer("spedcheck", 30000)
            if (clk("spedcheck") & Speed < 1) {
                AtBottom = 1
            }
        }
    
        if (AtBottom == 1 & Speed < 0.5 & Disable == 0) {
            Crab = randint(1,500)
            if (Crab == 10) {
               CrabType = randint(1,3)
                if (CrabType < Depth/1000) {CrabNum = 2}
                else {CrabNum = 1}
                A++
                holoCreate(A)
                holoPos(A,entity():toWorld(vec(randint(-20,20),randint(-40,40),-12)))
                holoParent(A,entity())
                holoAng(A,entity():toWorld(ang(0,randint(0,359),0)))
                holoModel(A,"models/zeny/crab" + CrabNum + ".mdl")
                Crabsize = randint(3,10)
                holoScale(A,vec(Crabsize/10))
               Crabs = A
            }
        }
        if (AtBottom == 1) {
            timer("depth", 1000)
            if(clk("depth")) {
               BouyPos = Bouy:pos():z()
               PotPos = entity():pos():z()
               Depth = abs(PotPos - BouyPos)
            if (LastDepth > Depth+3) {
             Disable = 1
            }
        else {LastDepth = Depth}

    }
    }
    }
    if (Length > 5 & !Bouy:isUnderWater()) {
        Length -= 10
        entity():setLength(1,Length)
    }
    if (Door == 1) {
        print("you got " + Crabs + " crabs")
        for (I = 1, Crabs, 1) {
            holoDelete(I)
       }
        entity():setBodygroup(1,0)
    }
}
